#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Aug 26 16:18:01 2019

@author: matteo
"""
#
#NEW VERSION
#Bounds to assortativity
#
#Go to last lines for a working example
#
import numpy as np
import scipy as sp
import math 


#Bounds valid in the Metadata Graph Space:
#the required inputs are a graph (connected,undirected and unweighted) and
#a binary vector of size equal to the number of nodes of the graph.
#
#first I define the bounds to the edge counts than the assortativity
#
#the function for assortativity is called  r_binary_min_max_MGS_v014
#
#
def m11_MGS_max(g,binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    #now d becomes a degree sequence (i.e. sorted in non increasing order)
    #d = d[::-1].sort()
    d = sorted([d for n, d in g.degree()], reverse=True)
    d = np.array(d)
    n1 = sum(binaryvector)
    ds1 = d[0:n1]
    ds1[ds1 > (n1-1)] = n1-1 
    result = min(sum(d)/2,sp.special.binom(n1,2),math.ceil(sum(ds1)/2))
    return(result)
    
def m00_MGS_max(g,binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    #now d becomes a degree sequence (i.e. sorted in non increasing order)
    d = sorted([d for n, d in g.degree()], reverse=True)
    d = np.array(d)
    n1 = sum(binaryvector)
    n0 = len(binaryvector)-n1
    ds0 = d[0:n0]
    ds0[ds0 > (n0-1)] = n0-1 
    result = min(sum(d)/2,sp.special.binom(n0,2),math.ceil(sum(ds0)/2))
    return(result)    

def m11_MGS_min(g,binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    #now d becomes a degree sequence (i.e. sorted in non increasing order)
    d = sorted([d for n, d in g.degree()], reverse=True)
    d = np.array(d)
    n1 = sum(binaryvector)
    n0 = len(binaryvector)-n1
    if n1!=(n1+n0):
        firstpart = d[n0:(n1+n0)]
        secondpart = d[0:n0]
        secondpart[secondpart>n1] = n1
        result= max(0,math.floor((sum(firstpart)-sum(secondpart))/2))
    else:
        result = sum(d)/2
    return(result)
    
def m00_MGS_min(g,binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    #now d becomes a degree sequence (i.e. sorted in non increasing order)
    d = sorted([d for n, d in g.degree()], reverse=True)
    d = np.array(d)
    n1 = sum(binaryvector)
    n0 = len(binaryvector)-n1
    if n0!=(n1+n0):
        firstpart = d[n1:(n1+n0)]
        secondpart = d[0:n1]
        secondpart[secondpart>n0] = n0
        result= max(0,math.floor((sum(firstpart)-sum(secondpart))/2))
    else:
        result = sum(d)/2
    return(result)

def m10_MGS_min(g,binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    #now d becomes a degree sequence (i.e. sorted in non increasing order)
    d = sorted([d for n, d in g.degree()], reverse=True)
    d = np.array(d)
    n1 = sum(binaryvector)
    n0 = len(binaryvector)-n1
    if n1 != 0 or n1 !=(n1+n0):
        t1 = 1
        t2 = sum(d[n0:(n1+n0)])-n1*(n1-1)
        t3 = sum(d[n1:(n1+n0)])-n0*(n0-1)
        if n1 > n0:
            t4 = d[0:n1]-(n1-1)
            t4[t4<0] = 0
            t4 = sum(t4)/2
            result = max(t1,t2,t3,t4)
        else:
            t4 = d[0:n0]-(n0-1)
            t4[t4<0] = 0
            t4 = sum(t4)/2
            result = max(t1,t2,t3,t4)
    else:
        result = 0
    return(result)
        
def r_binary_min_max_MGS_v014(g, binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    m = sum(d)/2
    #n1 = sum(binaryvector)
    #n0 = len(binaryvector)-n1
    #d1 = d[binaryvector>0]
    #d0 = d[binaryvector<1]
    #
    num_eq15 = 2*m*(m-m00_MGS_min(g,binaryvector)-m11_MGS_min(g,binaryvector))
    den_eq15 = m**2 - (m00_MGS_min(g,binaryvector)-m11_MGS_min(g,binaryvector))**2
    r_eq15 = 1 - (num_eq15/den_eq15)
    #
    m10_max = m10_MGS_max(g, binaryvector)
    #
    #DeltaMin -> equation 16
    if (m10_max+m11_MGS_min(g,binaryvector))<m:
        num_eq16 = 2*m10_max*m
        den_eq16 = m**2 - (m-m10_max-(2*m11_MGS_min(g,binaryvector)))**2
        #r_DeltaMin
        r_eq16 = 1 - (num_eq16/den_eq16)
    else:
        r_eq16 = r_eq15
        
    if(m10_max+m00_MGS_min(g,binaryvector))<m:
        num_eq17 = 2*m10_max*m
        den_eq17 = m**2 - (m10_max+(2*m00_MGS_min(g,binaryvector))-m)**2
        #r_DeltaMax
        r_eq17 = 1 - (num_eq17/den_eq17)
    else:
        r_eq17 = r_eq15
    r_min = round(min(r_eq15,r_eq16,r_eq17),3)
    #
    m10_min = m10_MGS_min(g,binaryvector)
    #
    r_max = 1 - ((2*m10_min)/m)
    r_max = round(r_max,3)
    
    return [r_min, r_max]

######################################################
#Bounds valid in the Graph Space:
#the required inputs are a graph (connected,undirected and unweighted) and
#a binary vector of size equal to the number of nodes of the graph.
#
#first I define the bounds to the edge counts than the assortativity
#
#the function for assortativity is called  r_binary_min_max_GS
#
def m11_GS_max(g,binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    n1 = sum(binaryvector)#degree sequence
    d1 = d[binaryvector>0]#degree values where the vector has 1s
    d1[d1 > (n1-1)] = (n1-1)
    result = min(sum(d)/2,sp.special.binom(n1,2),math.ceil(sum(d1)/2))
    return(result)
    
def m00_GS_max(g,binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    n1 = sum(binaryvector)
    n0 = len(binaryvector)-n1
    d0 = d[binaryvector<1]#degree values where the vector has 0s
    d0[d0 > (n0-1)] = (n0-1)
    result = min(sum(d)/2,sp.special.binom(n0,2),math.ceil(sum(d0)/2))
    return(result)
    
def m10_GS_max(g,binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    n1 = sum(binaryvector)
    n0 = len(binaryvector)-n1
    d1 = d[binaryvector>0]
    d0 = d[binaryvector<1]
    #
    d1[d1 > n0] = n0
    d0[d0 > n1] = n1
    result = min(sum(d)/2,n1*n0,min(sum(d1),sum(d0)))
    return(result)
    
def m11_GS_min(g,binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    n1 = sum(binaryvector)
    n0 = len(binaryvector)-n1
    d1 = d[binaryvector>0]
    d0 = d[binaryvector<1]
    if n1!=(n1+n0):
        d0[d0 > n1] = n1
        result = max(0, math.floor(sum(d1)-sum(d0))/2)
    else:
        result = sum(d)/2
    return(result)

def m00_GS_min(g,binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    n1 = sum(binaryvector)
    n0 = len(binaryvector)-n1
    d1 = d[binaryvector>0]
    d0 = d[binaryvector<1]
    if n0!=(n1+n0):
        d1[d1 > n0] = n0
        result = max(0, math.floor(sum(d0)-sum(d1))/2)
    else:
        result = sum(d)/2
    return(result)
 
def m10_GS_min(g,binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    n1 = sum(binaryvector)
    n0 = len(binaryvector)-n1
    d1 = d[binaryvector>0]
    d0 = d[binaryvector<1]
    if n1!=0 & n1!=(n1+n0):
        temp2 = d1 - (n1-1)
        temp2[temp2<0] = 0
        temp3 = d0 - (n0-1)
        temp3[temp3<0] = 0
        result = max(1,sum(temp2),sum(temp3))
    else:
        result = 0
    return(result)
        
def r_binary_min_max_GS_v014(g, binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    m = sum(d)/2
    #n1 = sum(binaryvector)
    #n0 = len(binaryvector)-n1
    #d1 = d[binaryvector>0]
    #d0 = d[binaryvector<1]
    #
    num_eq15 = 2*m*(m-m00_GS_min(g,binaryvector)-m11_GS_min(g,binaryvector))
    den_eq15 = m**2 - (m00_GS_min(g,binaryvector)-m11_GS_min(g,binaryvector))**2
    r_eq15 = 1 - (num_eq15/den_eq15)
    #
    m10_max = m10_GS_max(g, binaryvector)
    #
    #DeltaMin -> equation 16
    if (m10_max+m11_GS_min(g,binaryvector))<m:
        num_eq16 = 2*m10_max*m
        den_eq16 = m**2 - (m-m10_max-(2*m11_GS_min(g,binaryvector)))**2
        #r_DeltaMin
        r_eq16 = 1 - (num_eq16/den_eq16)
    else:
        r_eq16 = r_eq15
        
    if(m10_max+m00_GS_min(g,binaryvector))<m:
        num_eq17 = 2*m10_max*m
        den_eq17 = m**2 - (m10_max+(2*m00_GS_min(g,binaryvector))-m)**2
        #r_DeltaMax
        r_eq17 = 1 - (num_eq17/den_eq17)
    else:
        r_eq17 = r_eq15
    r_min = round(min(r_eq15,r_eq16,r_eq17),3)
    #
    m10_min = m10_GS_min(g,binaryvector)
    #
    r_max = 1 - ((2*m10_min)/m)
    r_max = round(r_max,3)
    
    return [r_min, r_max]
##########################################################################
#Working example: the graph has to be connected, undirected and unweighted
##########################################################################
import networkx as nx

g = nx.gnp_random_graph(150, 0.2)
binaryvector = np.random.choice([0, 1], size=(150,), p=[1./3, 2./3])
#degree_sequence = sorted([d for n, d in G.degree()], reverse=True) 

r_binary_min_max_MGS_v014(g,binaryvector)

r_binary_min_max_GS_v014(g,binary_vector)


