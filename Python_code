#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Aug 26 16:18:01 2019

@author: matteo
"""
#
#NEW VERSION
#Bounds to assortativity
#
#Go to last lines for a working example
#
import numpy as np
import scipy as sp
import math 


#Bounds valid in the Metadata Graph Space:
#the required inputs are a graph (connected,undirected and unweighted) and
#a binary vector of size equal to the number of nodes of the graph.
#
#first I define the bounds to the edge counts than the assortativity
#
#the function for assortativity is called  r_binary_min_max_MGS
#
#
def m11_MGS_max(g,binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    #now d becomes a degree sequence (i.e. sorted in non increasing order)
    #d = d[::-1].sort()
    d = sorted([d for n, d in g.degree()], reverse=True)
    d = np.array(d)
    n1 = sum(binaryvector)
    ds1 = d[0:n1]
    ds1[ds1 > (n1-1)] = n1-1 
    result = min(sum(d)/2,sp.special.binom(n1,2),math.ceil(sum(ds1)/2))
    return(result)
    
def m00_MGS_max(g,binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    #now d becomes a degree sequence (i.e. sorted in non increasing order)
    d = sorted([d for n, d in g.degree()], reverse=True)
    d = np.array(d)
    n1 = sum(binaryvector)
    n0 = len(binaryvector)-n1
    ds0 = d[0:n0]
    ds0[ds0 > (n0-1)] = n0-1 
    result = min(sum(d)/2,sp.special.binom(n0,2),math.ceil(sum(ds0)/2))
    return(result)    

def m11_MGS_min(g,binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    #now d becomes a degree sequence (i.e. sorted in non increasing order)
    d = sorted([d for n, d in g.degree()], reverse=True)
    d = np.array(d)
    n1 = sum(binaryvector)
    n0 = len(binaryvector)-n1
    if n1!=(n1+n0):
        firstpart = d[n0:(n1+n0)]
        secondpart = d[0:n0]
        secondpart[secondpart>n1] = n1
        result= max(0,math.floor((sum(firstpart)-sum(secondpart))/2))
    else:
        result = sum(d)/2
    return(result)
    
def m00_MGS_min(g,binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    #now d becomes a degree sequence (i.e. sorted in non increasing order)
    d = sorted([d for n, d in g.degree()], reverse=True)
    d = np.array(d)
    n1 = sum(binaryvector)
    n0 = len(binaryvector)-n1
    if n0!=(n1+n0):
        firstpart = d[n1:(n1+n0)]
        secondpart = d[0:n1]
        secondpart[secondpart>n0] = n0
        result= max(0,math.floor((sum(firstpart)-sum(secondpart))/2))
    else:
        result = sum(d)/2
    return(result)

def m10_MGS_min(g,binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    #now d becomes a degree sequence (i.e. sorted in non increasing order)
    d = sorted([d for n, d in g.degree()], reverse=True)
    d = np.array(d)
    n1 = sum(binaryvector)
    n0 = len(binaryvector)-n1
    if n1 != 0 or n1 !=(n1+n0):
        t1 = 1
        t2 = sum(d[n0:(n1+n0)])-n1*(n1-1)
        t3 = sum(d[n1:(n1+n0)])-n0*(n0-1)
        if n1 > n0:
            t4 = d[0:n1]-(n1-1)
            t4[t4<0] = 0
            t4 = sum(t4)/2
            result = max(t1,t2,t3,t4)
        else:
            t4 = d[0:n0]-(n0-1)
            t4[t4<0] = 0
            t4 = sum(t4)/2
            result = max(t1,t2,t3,t4)
    else:
        result = 0
    return(result)
        
def r_binary_min_max_MGS(g, binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    m = sum(d)/2
    #n1 = sum(binaryvector)
    #n0 = len(binaryvector)-n1
    #d1 = d[binaryvector>0]
    #d0 = d[binaryvector<1]
    
    term1_min = m11_MGS_min(g,binaryvector)/m
    term3_min = m00_MGS_min(g,binaryvector)/m
    term2_min = (0.5 - term1_min/2 - term3_min/2)
    
    r_min = (term1_min + term3_min - (term3_min + term2_min)**2 - (term1_min + term2_min)**2) / (1 - (term3_min + term2_min)**2 - (term1_min + term2_min)**2)
    r_min = round(r_min,3)
    #
    #m11_max = m11_MGS_max(g,binaryvector)
    #m00_max = m00_MGS_max(g,binaryvector)
    m10_min = m10_MGS_min(g,binaryvector)
    #
    term2_max = m10_min / sum(d)#2m
    term13_max = (m-m10_min)/m
    term1_max = (m-m10_min)/sum(d)
    term3_max = (m-m10_min)/sum(d)
    #     
    r_max = (term13_max - (term3_max + term2_max)**2 - (term1_max + term2_max)**2)/(1 - 
            (term3_max + term2_max)**2 - (term1_max + term2_max)**2)
    r_max = round(r_max,3)
    
    return [r_min, r_max]

######################################################

#Bounds valid in the Graph Space:
#the required inputs are a graph (connected,undirected and unweighted) and
#a binary vector of size equal to the number of nodes of the graph.
#
#first I define the bounds to the edge counts than the assortativity
#
#the function for assortativity is called  r_binary_min_max_GS
#
def m11_MGS_max(g,binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    #now d becomes a degree sequence (i.e. sorted in non increasing order)
    #d = d[::-1].sort()
    d = sorted([d for n, d in g.degree()], reverse=True)
    d = np.array(d)
    n1 = sum(binaryvector)
    ds1 = d[0:n1]
    ds1[ds1 > (n1-1)] = n1-1 
    result = min(sum(d)/2,sp.special.binom(n1,2),math.ceil(sum(ds1)/2))
    return(result)
    
def m00_MGS_max(g,binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    #now d becomes a degree sequence (i.e. sorted in non increasing order)
    d = sorted([d for n, d in g.degree()], reverse=True)
    d = np.array(d)
    n1 = sum(binaryvector)
    n0 = len(binaryvector)-n1
    ds0 = d[0:n0]
    ds0[ds0 > (n0-1)] = n0-1 
    result = min(sum(d)/2,sp.special.binom(n0,2),math.ceil(sum(ds0)/2))
    return(result)    

def m11_MGS_min(g,binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    #now d becomes a degree sequence (i.e. sorted in non increasing order)
    d = sorted([d for n, d in g.degree()], reverse=True)
    d = np.array(d)
    n1 = sum(binaryvector)
    n0 = len(binaryvector)-n1
    if n1!=(n1+n0):
        firstpart = d[n0:(n1+n0)]
        secondpart = d[0:n0]
        secondpart[secondpart>n1] = n1
        result= max(0,math.floor((sum(firstpart)-sum(secondpart))/2))
    else:
        result = sum(d)/2
    return(result)
    
def m00_MGS_min(g,binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    #now d becomes a degree sequence (i.e. sorted in non increasing order)
    d = sorted([d for n, d in g.degree()], reverse=True)
    d = np.array(d)
    n1 = sum(binaryvector)
    n0 = len(binaryvector)-n1
    if n0!=(n1+n0):
        firstpart = d[n1:(n1+n0)]
        secondpart = d[0:n1]
        secondpart[secondpart>n0] = n0
        result= max(0,math.floor((sum(firstpart)-sum(secondpart))/2))
    else:
        result = sum(d)/2
    return(result)

def m10_MGS_min(g,binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    #now d becomes a degree sequence (i.e. sorted in non increasing order)
    d = sorted([d for n, d in g.degree()], reverse=True)
    d = np.array(d)
    n1 = sum(binaryvector)
    n0 = len(binaryvector)-n1
    if n1 != 0 or n1 !=(n1+n0):
        t1 = 1
        t2 = sum(d[n0:(n1+n0)])-n1*(n1-1)
        t3 = sum(d[n1:(n1+n0)])-n0*(n0-1)
        if n1 > n0:
            t4 = d[0:n1]-(n1-1)
            t4[t4<0] = 0
            t4 = sum(t4)/2
            result = max(t1,t2,t3,t4)
        else:
            t4 = d[0:n0]-(n0-1)
            t4[t4<0] = 0
            t4 = sum(t4)/2
            result = max(t1,t2,t3,t4)
    else:
        result = 0
    return(result)
        
def r_binary_min_max_MGS(g, binaryvector):
    d = np.array([val for (node,val) in g.degree()])
    m = sum(d)/2
    #n1 = sum(binaryvector)
    #n0 = len(binaryvector)-n1
    #d1 = d[binaryvector>0]
    #d0 = d[binaryvector<1]
    
    term1_min = m11_MGS_min(g,binaryvector)/m
    term3_min = m00_MGS_min(g,binaryvector)/m
    term2_min = (0.5 - term1_min/2 - term3_min/2)
    
    r_min = (term1_min + term3_min - (term3_min + term2_min)**2 - (term1_min + term2_min)**2) / (1 - (term3_min + term2_min)**2 - (term1_min + term2_min)**2)
    r_min = round(r_min,3)
    #
    #m11_max = m11_MGS_max(g,binaryvector)
    #m00_max = m00_MGS_max(g,binaryvector)
    m10_min = m10_MGS_min(g,binaryvector)
    #
    term2_max = m10_min / sum(d)#2m
    term13_max = (m-m10_min)/m
    term1_max = (m-m10_min)/sum(d)
    term3_max = (m-m10_min)/sum(d)
    #     
    r_max = (term13_max - (term3_max + term2_max)**2 - (term1_max + term2_max)**2)/(1 - 
            (term3_max + term2_max)**2 - (term1_max + term2_max)**2)
    r_max = round(r_max,3)
    
    return [r_min, r_max]

##########################################################################
#Working example: the graph has to be connected, undirected and unweighted
##########################################################################
import networkx as nx

g = nx.gnp_random_graph(150, 0.2)
binaryvector = np.random.choice([0, 1], size=(150,), p=[1./3, 2./3])
#degree_sequence = sorted([d for n, d in G.degree()], reverse=True) 

r_binary_min_max_MGS(g,binaryvector)

r_binary_min_max_GS(g,binary_vector)


