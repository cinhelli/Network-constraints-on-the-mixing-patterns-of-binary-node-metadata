#NEW VERSION:v.014
#Bounds to assortativity:


#Bounds valid in the Metadata Graph Space:
#the required inputs are a graph (connected,undirected and unweighted) and
#a binary vector of size equal to the number of nodes of the graph.

r_binary_min_max_MGS_v014 <- function(g,binaryvector){ 
  #Necessary measures
  n1 <- sum(binaryvector)
  N <- vcount(g)
  M <- ecount(g)
  deg_seq <- sort(degree(g),decreasing = T)
  #Bounds to edge counts in MGS
  #LB m11
  m11.min.new.new <- function(n1,N,deg_seq){
    n0 <- N - n1
    if(n1!=N){
      firstpart <- deg_seq[N:(N-n1+1)]
      secondpart <- deg_seq[1:(N-n1)]
      secondpart[secondpart>n1] <- n1
      max(0,floor((sum(firstpart)-sum(secondpart))/2))# +1 is for vectorization
    }else(sum(deg_seq)/2)
  }
  #LB m00
  m00.min.new.new <- function(n1,N,deg_seq){
    n0 <- N - n1
    if(n0!=N){
      firstpart <- deg_seq[N:(N-n0+1)]
      secondpart <- deg_seq[1:(N-n0)]
      secondpart[secondpart>n0] <- n0
      max(0,floor((sum(firstpart)-sum(secondpart))/2))#
    }else(sum(deg_seq)/2)
  }
  #LB m10
  m10.min.new.new <- function(n1,N,deg_seq){
    t_f <- 0
    n0 <- N - n1
    if(n1 != 0 & n1 != N ){
      t1 <- 1
      t2 <- sum(deg_seq[N:(N-n1+1)])-n1*(n1-1)
      t3 <- sum(deg_seq[N:(N-n0+1)])-n0*(n0-1)
      if(n1 > n0){
        tmp_t4 <- deg_seq[1:n1]-(n1-1)
        tmp_t4[tmp_t4<0] <- 0
        t4 <- sum(tmp_t4)/2
        t_f <- max(t1,t2,t3,t4)
      }
      if(n1 <= n0){
        tmp_t4 <- deg_seq[1:n0]-(n0-1)
        tmp_t4[tmp_t4<0] <- 0
        t4 <- sum(tmp_t4)/2
        t_f <- max(t1,t2,t3,t4)
      }
    }
    return(t_f)
  }
  #UB m11
  m11.max.new <- function(n1,M,deg_seq){ #deg_seq sorted from high to low
    ds1 <- deg_seq[1:n1]
    ds1[ds1 > (n1-1)] <- n1-1 
    min(M,choose(n1,2),ceiling(sum(ds1)/2))
  }
  #UB m00
  m00.max.new <- function(n1,N,M,deg_seq){ #
    n0 <- N - n1
    ds0 <- deg_seq[1:n0]
    ds0[ds0 > (n0-1)] <- n0-1 
    min(M,choose(n0,2),ceiling(sum(ds0)/2))
  }
  #UB m10
  m10.max.new <- function(n1,N,M,deg_seq){
    ds1 <- deg_seq[1:n1]
    ds1[ds1 > (N - n1)] <- N - n1
    ds0 <- deg_seq[1:(N - n1)]
    ds0[ds0 > n1] <- n1
    min(M,n1*(N-n1),min(sum(ds1),sum(ds0)))
  }
  ####################################################
  #MINIMIZATION
  ####################################################
  LBm11 <- m11.min.new.new(n1, N,  deg_seq)
  LBm00 <- m00.min.new.new(n1, N,  deg_seq)
  #equation 15
  num_eq15 <- 2*M*(M-LBm00-LBm11)
  den_eq15 <- M^2 - (LBm00-LBm11)^2
  r_eq15 <- 1 - (num_eq15/den_eq15)
  #
  UBm10 <- m10.max.new(n1,N,M,deg_seq)
  #
  #DeltaMin -> equation 16
  if(UBm10+LBm11<=M){
    num_eq16 <- 2*UBm10*M
    den_eq16 <- M^2 - (M-UBm10-2*LBm11)^2
    #r_DeltaMin
    r_eq16 <- 1 - (num_eq16/den_eq16)
  }else(r_eq16 <- r_eq15)#since this bound is valid also in the else case
  #DeltaMax -> equation 17
  if(UBm10+LBm00<=M){
    num_eq17 <- 2*UBm10*M
    den_eq17 <- M^2 - (UBm10 +2*LBm00-m)^2
    #r_DeltaMax
    r_eq17 <- 1- (num_eq17/den_eq17)
  }else(r_eq17 <- r_eq15)#since this bound is valid also in the else case
  
  r_min <- round(min(r_eq15, r_eq16, r_eq17), digits = 3)
  ####################################################
  #MAXIMIZATION
  ####################################################
  LBm10 <- m10.min.new.new(n1,N,deg_seq)
  #equation 12 
  r_max <- 1 - ((2*LBm10)/(M))
  r_max <- round(r_max, digits = 3)
  
  return(list(LBm11 = LBm11, LBm00 = LBm00, LBm10 = LBm10, r_min = r_min, r_max = r_max))
}

#Bounds valid in the Graph Space:
#the required inputs are a graph (connected,undirected and unweighted) and
#a binary vector of size equal to the number of nodes of the graph.

r_binary_min_max_GS_v014 <- function(g, binaryvector){
  M <- ecount(g)
  m11.GS.max <- function(g,binaryvector){
    d <- degree(g)
    n1 <- sum(binaryvector)
    theones <- which(binaryvector==1)
    d1 <- d[theones]
    d1[d1 > (n1-1)] <- n1-1 
    min(M,choose(n1,2),ceiling(sum(d1)/2))
  }
  m00.GS.max <- function(g,binaryvector){
    d <- degree(g)
    n1 <- sum(binaryvector)
    n0 <- vcount(g)-n1
    thezeros <- which(binaryvector==0)
    d0 <- d[thezeros]
    d0[d0 > (n0-1)] <- n0-1 
    min(M,choose(n0,2),ceiling(sum(d0)/2))
  }
  m10.GS.max <- function(g,binaryvector){
    d <- degree(g)
    N <- vcount(g)
    n1 <- sum(binaryvector)
    theones <- which(binaryvector==1)
    thezeros <- which(binaryvector==0)
    d1 <- d[theones]
    d1[d1 > (N - n1)] <- N - n1
    d0 <- d[thezeros]
    d0[d0 > n1] <- n1
    min(M,n1*(N-n1),min(sum(d1),sum(d0)))
  }
  #
  m11.GS.min <- function(g, binaryvector){
    d <- degree(g)
    N <- vcount(g)
    n1 <- sum(binaryvector)
    theones <- which(binaryvector==1)
    thezeros <- which(binaryvector==0)
    d1 <- d[theones]
    d0 <- d[thezeros]
    if(n1!=N){
      firstpart <- d[theones]
      secondpart <- d[thezeros]
      secondpart[secondpart>n1] <- n1
      max(0,floor((sum(firstpart)-sum(secondpart))/2))#+1 for vectorization
    }else(sum(d)/2)
  }
  m00.GS.min <- function(g, binaryvector){
    d <- degree(g)
    N <- vcount(g)
    n1 <- sum(binaryvector)
    n0 <- N - n1
    theones <- which(binaryvector==1)
    thezeros <- which(binaryvector==0)
    d1 <- d[theones]
    d0 <- d[thezeros]
    if(n0!=N){
      firstpart <- d[thezeros]
      secondpart <- d[theones]
      secondpart[secondpart>(N-n1)] <- N-n1
      max(0,floor((sum(firstpart)-sum(secondpart))/2))#
    }else(sum(d)/2)
  }
  m10.GS.min <- function(g, binaryvector){
    t_f <- 0
    d <- degree(g)
    N <- vcount(g)
    n1 <- sum(binaryvector)
    n0 <- N - n1
    theones <- which(binaryvector==1)
    thezeros <- which(binaryvector==0)
    d1 <- d[theones]
    d0 <- d[thezeros]
    if(n1 != 0 & n1 != N ){
      t1 <- 1
      t2 <- d1 - (n1-1)
      t2[t2<0] <- 0
      t2 <- sum(t2)
      t3 <- d0 - (n0-1);t3[t3<0]<-0
      t3 <- sum(t3)
      t_f <- max(t1,t2,t3)
    }
    return(t_f)
  }
  
  ####################################################
  #MINIMIZATION
  ####################################################
  LBm11 <- m11.GS.min(g, binaryvector)
  LBm00 <- m00.GS.min(g, binaryvector)
  #equation 15 in GS
  num_eq15 <- 2*M*(M-LBm00-LBm11)
  den_eq15 <- M^2 - (LBm00-LBm11)^2
  r_eq15 <- 1 - (num_eq15/den_eq15)
  #
  UBm10 <- m10.GS.max(g, binaryvector)
  #
  #DeltaMin -> equation 16
  if(UBm10+LBm11<=M){
    num_eq16 <- 2*UBm10*M
    den_eq16 <- M^2 - (M-UBm10-2*LBm11)^2
    #r_DeltaMin
    r_eq16 <- 1 - (num_eq16/den_eq16)
  }else(r_eq16 <- r_eq15)#since this bound is valid also in the else case
  #DeltaMax -> equation 17
  if(UBm10+LBm00<=M){
    num_eq17 <- 2*UBm10*M
    den_eq17 <- M^2 - (UBm10 +2*LBm00-m)^2
    #r_DeltaMax
    r_eq17 <- 1- (num_eq17/den_eq17)
  }else(r_eq17 <- r_eq15)#since this bound is valid also in the else case
  
  r_min <- round(min(r_eq15, r_eq16, r_eq17), digits = 3)
  ####################################################
  #MAXIMIZATION
  ####################################################
  LBm10 <- m10.GS.min(g, binaryvector)
  #equation 12 
  r_max <- 1 - ((2*LBm10)/(M))
  r_max <- round(r_max, digits = 3)
  return(list(LBm11 = LBm11, LBm00 = LBm00, LBm10 = LBm10, r_min = r_min, r_max = r_max))
}

##########################################################################
#Working example: the graph has to be connected, undirected and unweighted
##########################################################################
library(igraph)

g <- erdos.renyi.game(150,0.2, directed = F); 
is.connected(g)#if not retry
binaryvector <- rep(0,150); binaryvector[sample(150,25)] <- 1

r_binary_min_max_GS_v014(g,binaryvector)

r_binary_min_max_MGS_v014(g,binaryvector)
